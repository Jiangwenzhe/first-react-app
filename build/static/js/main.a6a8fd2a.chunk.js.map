{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["list","title","url","author","num_comments","points","objectID","largeColumn","width","midColumn","smallColumn","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","searchTerm","onDismiss","bind","assertThisInitialized","onSearchChange","id","console","log","updatedList","filter","item","setState","event","target","value","_this$state","react_default","a","createElement","className","App_Search","onChange","App_Table","pattern","Component","Search","_ref","children","type","Table","_ref2","toLowerCase","includes","map","key","style","href","App_Button","onClick","Button","_ref3","_ref3$className","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a6a8fd2a.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nconst list = [\n  {\n    title: 'React',\n    url: 'https://facebook.github.io/react/',\n    author: 'Jordan Walke',\n    num_comments: 3,\n    points: 4,\n    objectID: 0,\n  },\n  {\n    title: 'Redux',\n    url: 'https://github.com/reactjs/redux',\n    author: 'Dan Abramov, Andrew Clark',\n    num_comments: 2,\n    points: 5,\n    objectID: 1,\n}];\n\nconst largeColumn = { width: '40%',};\nconst midColumn = { width: '30%',};\nconst smallColumn = { width: '10%',};\n\nconst isSearched = searchTerm => item => item.title.toLowerCase().includes(searchTerm.toLowerCase());\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      list:list,\n      searchTerm: '',\n    };\n    this.onDismiss = this.onDismiss.bind(this)\n    this.onSearchChange = this.onSearchChange.bind(this)\n  }\n  onDismiss(id) {\n    console.log(this.state.list);\n   const isNotId = item => item.objectID !== id;\n   const updatedList = this.state.list.filter(isNotId);\n   this.setState({ list: updatedList });\n  }\n\n  onSearchChange(event) {\n    this.setState({ searchTerm: event.target.value });\n  }\n\n  render() {\n    //解构赋值\n    const {list,searchTerm} = this.state\n    return (\n      <div className=\"page\">\n        <div className=\"interactions\">\n          <Search\n            value={searchTerm}\n            onChange = {this.onSearchChange}\n          >\n            Search:\n          </Search>\n        </div>\n        <Table\n          list={list}\n          pattern={searchTerm}\n          onDismiss={this.onDismiss}\n        />\n      </div>\n    );\n  }\n}\n\nconst Search = ({ value, onChange, children }) =>\n  <form>\n    {children} <input\n      type=\"text\"\n      value={value}\n      onChange={onChange}\n    />\n  </form>\n\nconst Table = ({ list, pattern, onDismiss }) =>\n  <div className=\"table\">\n    {list.filter(isSearched(pattern)).map(item =>\n      <div key={item.objectID} className=\"table-row\">\n        <span style={largeColumn}>\n          <a href=\"{item.url}\">{item.title}</a>\n        </span>\n        <span style={midColumn}>{item.author}</span>\n        <span style={smallColumn}>{item.num_comments}</span>\n        <span style={smallColumn}>{item.points}</span>\n        <span style={smallColumn}>\n          <Button\n            onClick={() => onDismiss(item.objectID)}\n            className=\"button-inline\"\n          >\n            Dismiss\n          </Button>\n        </span>\n      </div>\n    )}\n  </div>\n\nconst Button = ({ onClick, className='', children }) =>\n  <button\n    onClick={onClick}\n    className={className}\n    children={children}\n  >\n    {children}\n  </button>\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<div><App /></div>, document.getElementById('root'));\nserviceWorker.unregister();\n\nif (module.hot) {\n  module.hot.accept();\n}\n"],"sourceRoot":""}